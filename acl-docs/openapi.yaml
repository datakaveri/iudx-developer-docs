openapi: 3.0.0
info:
  version: 1.0.1
  title: Data-Exchange-ACL-APD
  description: |

    # Introduction

    **The Data Exchange (DX) Access Control List (ACL) based Access Policy Domain (APD)** are designed for creating and managing policies for consumers and consumer delegates.
    This allows providers and provider delegates to control access to their resources by consumers and consumer delegates.
    This API specification for ACL APD requires a valid identity token from the **Data Exchange (DX) Authentication Authorization and Accounting (AAA) Server** for authentication purposes.

    # Configurations
    - **Server**: 
      - In the doc, we display the server url to be https://example-apd.com with the hostname as example-apd.com
      - This could be configured according to the deployment
    - **Base path**:
         - Base path is the path on which API is served, relative to the host
         - It is the initial part of the API
         - These base path values could be configured according to the deployment
         - The base path for [DX AAA Server](https://github.com/datakaveri/iudx-aaa-server) is set to `/auth/v1`
         - The base path for [DX Catalogue Server](https://github.com/datakaveri/iudx-catalogue-server) is set to `/iudx/cat/v1`
         - All the APIs except `/verify` endpoint contain `/dx/apd/acl/v1` as it's base path
    - **Request Samples**:
      - The `<tokenValue>` in the header of request sample could be replaced with respective token value [Also refer Tokens section [here](#section/Tokens)]
      - The `<payload>` in the request sample could be replaced with the payload given adjacent to the request sample    

    # Tokens
     - All the endpoints except `/verify` should contain valid DX Identity token in the request header
     - `/verify` endpoint that is called by DX AAA Server, should contain valid Keycloak token in the request header 
     
    # API HTTP Responses
     Apart from the response codes specified in each API, the API server may respond with certain 4xx and 5xx error codes which are related to common API Gateway behaviours.
     The application should address them accordingly.

  contact:
    name: For support contact CDPG Team at
    email: support@iudx.org.in
    url: https://dataforpublicgood.org.in/
  license:
    name: Apache 2.0
  x-logo:
    url: https://dataforpublicgood.org.in/wp-content/uploads/2020/12/DPG.svg
    altText: CDPG logo

tags:
  - name: Policies
    x-displayName: "Policies"
    description: |
      The `Policies` collection includes APIs that allows the creation, deletion, and retrieval of user-generated policies.

  - name: Verify
    x-displayName: "Verify"
    description: |
      Verify the policy for a given resource item or group and owner.
  - name: Access Request
    x-displayName: "Access Request"
    description: |
      This collection allows users to initiate policy requests, retrieve lists of created access requests, delete specific requests, and manage requests by approving or rejecting them.


paths:
  /dx/apd/acl/v1/policies:
    get:
      tags:
        - Policies
      summary: Get Policies
      description: |
        Get all latest policies associated with a specific user. The response is determined by the user's roles:

        - If the user is a `provider`, the response includes all policies created by the provider or their delegates.
        - If the user is a `delegate`, the response comprises policies set by the delegate or set for the consumer on whose behalf the delegate is acting.
        - If the user is a `consumer`, the response includes policies set for the consumer.

        `Note`: Please note that the response displays the policies for a user concerning a specific server.

      operationId: get-auth-v1-policies
      parameters:
        - name: Authorization
          in: header
          description: AAA issued identity token
          required: true
          schema:
            type: string
            minLength: 1
            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
      responses:
        '200':
          description: |-
            Policies have been successfully listed.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/getPolicySuccessResponseWithResourceGroup'
                  - $ref: '#/components/schemas/getPolicySuccessResponseWithResourceType'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: 'Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '404':
          description: 'Not Found - Policy not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/policyNotFound'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
      security:
        - authorization: [ ]

      x-codeSamples:
        - lang: 'cURL'
          label: 'get latest policies'
          source: |
            curl --location --request GET 'https://example-apd.com/dx/apd/acl/v1/policies' \
            --header 'Authorization: <tokenValue>'

    delete:
      tags:
        - Policies
      summary: Delete Policy
      description: |-
        A provider of the resource can delete the policy. An existing active policy can be deleted by the provider or provider delegate. The request would contain id, i.e. the ID of the policy that the user wants to delete. The user can use the GET Policy API to get the policy ID.
      operationId: delete-auth-v1-policies
      parameters:
        - name: Authorization
          in: header
          description: AAA issued identity token
          required: true
          schema:
            type: string
            minLength: 1
            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
      requestBody:
        description: Request body is a JsonObject containing ID whose value is the policy ID.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                  minLength: 36

              required:
                - id
            examples:
              Request body for Delete Policy:
                value:
                  id: 231f6eca-6276-4993-bfeb-53cbbbba6f06
      responses:
        '200':
          description: User Policy deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletePolicy'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '400':
          description: |-
            Bad Request
            - Id is not a valid policyId
            - Policy has expired
            - Policy was previously deleted

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletePolicyErrorResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '404':
          description: |-
            Not Found
              - Policy id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletePolicyNotFoundErrorResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: |-
            Unauthorized
              - `token` invalid/expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
      security:
        - authorization: [ ]

      x-codeSamples:
        - lang: 'cURL'
          label: 'Delete policy'
          source: |
            curl --location --request DELETE 'https://example-apd.com/dx/apd/acl/v1/policies' \
            --header 'Content-Type: application/json' \
            --header 'Authorization: <tokenValue>' \
            --data-raw '<payload>'

    post:
      tags:
        - Policies
      summary: Create Policy
      description: |-

        The `Create Policy` API empowers both `providers` and their `delegates` to establish policies for resources owned by the `provider`. It enables `providers` to define policies for resources they own, and `delegates` can create policies on behalf of `providers` who own the resources.

        ## User Policies

          User policies, which are applicable to the `RESOURCE` and `RESOURCE_GROUP` item types, can be defined by a `provider` or its `delegate`. These policies regulate access to resources owned by the `provider` and apply to `consumers` accessing these resources.

        ## Item Types

        - `RESOURCE`: Policies can be applied to individual resources.
        - `RESOURCE_GROUP`: Policies can be set for resource groups.

        By utilizing the `Create Policy` API, `providers` and their `delegates` can effectively manage access control and resource governance within the system.

        `Note`: Only one policy can be generated per request.
      operationId: post-auth-v1-policies
      parameters:
        - name: Authorization
          in: header
          description: AAA issued identity token
          required: true
          schema:
            type: string
            minLength: 1
            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
      requestBody:
        description: >
          **Request Body Details:**

            The request body should be a JSON object containing a JSON array of request.

            ### User Policy Request:

            - `userEmail`: The email ID of the user for whom the policy is being defined.
            - `itemId`: The UUID value of the item for which the policy is being established.
            - `itemType`: An enum value representing the type of the item.
            - `expiryTime`: An optional field, representing the policy's expiry time in ISO8601 format compatible with UTC (yyyy-MM-dd'T'HH:mm:ss). If not provided, a default expiry time is set for the policy.
            - `constraints`: A JSON object containing constraints that the resource server can interpret.

        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                request:
                  type: array
                  minItems: 1
                  uniqueItems: true
                  items:
                    type: object
                    anyOf:
                      - type: object
                        additionalProperties: false
                        properties:
                          userEmail:
                            type: string
                            pattern: >-
                              ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
                            minLength: 1

                          itemId:
                            type: string
                            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
                            minLength: 1
                            maxLength: 512
                          itemType:
                            enum:
                              - RESOURCE
                              - RESOURCE_GROUP
                            minLength: 1
                          expiryTime:
                            type: string
                            pattern: >-
                              ^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$
                            minLength: 1
                          constraints:
                            type: object
                        required:
                          - userEmail
                          - itemId
                          - itemType
                          - constraints
              required:
                - request
              x-examples:
                example-1:
                  request:
                    - userEmail: pqr@abc.com
                      itemId: example-resource-group
                      itemType: RESOURCE_GROUP
                      expiryTime: '2023-08-30T21:10:06'
                      constraints: { }
                    - userEmail: test@demo.com
                      itemId: example-resource-group
                      itemType: RESOURCE_GROUP
                      expiryTime: '2023-08-30T21:10:06'
                      constraints: { }
            examples:
              Request for resource group user policy:
                value:
                  request:
                    - userEmail: abc@xyz.com
                      itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemType: RESOURCE_GROUP
                      expiryTime: '2022-08-04T20:00:19'
                      constraints:
                        access:
                          - sub
              Request for resource user policy:
                value:
                  request:
                    - userEmail: abc@xyz.com
                      itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                      itemType: RESOURCE
                      expiryTime: '2022-10-10T04:00:19'
                      constraints:
                        access:
                          - api
                          - sub
      responses:
        '200':
          description: >-
            The policy has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPolicySuccessResponse'
        '400':
          description: |-
            - Missing or malformed data
            - Invalid expiry - dateTime in the past or invalid format
            - Invalid user - UserId is not present in db
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPolicyBadRequest'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: >-
            - If the user trying to set a policy does not have a  `provider` or
            `delegate` role.

            - If the user is neither the owner of the resource item/group or a
            delegate to the owner of the resource item/group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createPolicyForbidden'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '409':
          description: |-
            - If a valid policy already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conflictResponse'
      security:
        - authorization: [ ]

      x-codeSamples:
        - lang: 'cURL'
          label: 'Create policy'
          source: |
            curl --location --request POST 'https://example-apd.com/dx/apd/acl/v1/policies' \
            --header 'Authorization: <tokenValue>' \
            --header 'Content-Type: application/json' \
              --data-raw '<payload>'

  /verify:
    post:
      tags:
        - Verify
      summary: Verify Policy
      description: |
        This endpoint checks if a policy exists for the specified item and owner in the APD server. It returns the policy constraints if a policy is found.

        `Note` : This endpoint is exclusive for internal use. The DX authentication server will invoke it before issuing access tokens to ensure the presence of a valid policy for the consumer and the requested resource.
      operationId: get-auth-v1-verify
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            minLength: 1
            example: Bearer <JWT>
      requestBody:
        description: >-
          The request body is a JSON object that contains information about the
          user, owner, and item.The user's ID, name, and email, as well as the
          owner's ID, name, and email, are provided.Additionally, information
          about the item, including its ID and type, is included.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestBodyForVerify'
            examples:
              Request body for Verify Policy:
                value:
                  user:
                    id: b58da193-23d9-43eb-b98a-a103d4b6103c
                    name:
                      firstName: demo
                      lastName: name
                    email: test_user_1@example.com
                  owner:
                    id: b2c27f3f-2524-4a84-816e-91f9ab23f837
                    name:
                      firstName: test
                      lastName: provider
                    email: test@provider.com
                  item:
                    itemId: b58da193-23d9-43eb-b98a-a103d4b6103c
                    itemType: RESOURCE_GROUP
      responses:
        '200':
          description: Policy verification successful
          content:
            application/json:
              example:
                type: urn:apd:Allow
                constraints:
                  rule: read
                  duration: 3600
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                type: urn:dx:acl:badRequest
                title: Bad Request
                detail: Bad Request
        '403':
          description: Forbidden
          content:
            application/json:
              example:
                type: urn:apd:Deny
                title: Policy does not exist
                detail: Invalid request format/Incorrect request
      security:
        - authorization: [ ]


      x-codeSamples:
        - lang: 'cURL'
          label: 'Verify policy'
          source: |
            curl --location --request POST 'https://example-apd.com/verify' \
            --header 'Authorization: bearer <tokenValue>' \
            --header 'Content-Type: application/json' \
              --data-raw '<payload>'

  /dx/apd/acl/v1/policies/requests:
    get:
      tags:
        - Access Request
      summary: List Access Requests
      description: |-
        Lists all the latest access requests of the user calling the API regardless of the state of the access requests. The response depends on the roles the user has

        - `provider` : The requests that are present for the items owned by a provider/provider delegate are returned.
        - `consumer` : The requests which are created by the consumer/consumer delegate are returned.
        <br>
        <br>

        `Note:` The response displays the requests of / for a user with respect to a particular server.

      operationId: get-auth-v1-policies-requests
      parameters:
        - name: Authorization
          in: header
          description: AAA issued Identity token
          required: true
          schema:
            type: string
            minLength: 1
            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
      responses:
        '200':
          description: |-
            OK
            - Successfully fetched all the requests of a consumer or of a provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequest'
              examples:
                ListResults:
                  value:
                    type: 'urn:dx:acl:success'
                    title: Success
                    results:
                      - requestId: ea48d233-5d3b-4bdb-9545-691680c99cee
                        itemId: sf50d232-5d3y-rbds-4758-691680c99defa
                        itemType: RESOURCE
                        resourceServerUrl: rs.iudx.io
                        status: PENDING
                        expiryAt: '2024-03-05T20:00:19'
                        constraints:
                          access:
                            - api
                            - sub
                            - file
                        additionalInfo:
                          name: Miles Morales,
                          email: miles.morales@acmecorp.org,
                          phoneNo: 9876543210,
                          purpose: academia,
                          description: 'Data from the resource would be used for non-commercial, academia purposes to test the application abcd'
                        updatedAt: "2024-01-10T10:15:36.696228"
                        createdAt: "2023-09-26T11:17:58.473452"
                        provider:
                          email: bob_provider@iisc.ac.in
                          name:
                            firstName: Bob
                            lastName: Provider
                          id: 844e251b-574b-46e6-9247-f76f1f70a637
                        consumer:
                          email: someone@example.com
                          name:
                            firstName: Someone
                            lastName: Person
                          id: a13eb955-c691-4fd3-b200-f18bc78810b5
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '404':
          description: |-
            Not Found
            - access requests were not previously created by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getNotificationNotFoundResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
      security:
        - authorization: [ ]
      x-codeSamples:
        - lang: 'cURL'
          label: 'Get access requests'
          source: |
            curl --location --request GET 'https://example-apd.com/dx/apd/acl/v1/policies/requests' \
          --header 'Authorization: <tokenValue>'

    post:
      tags:
        - Access Request
      summary: Create Access Request
      description: |-
        Access requests are made by consumer/consumer delegate to request a provider to grant access to the provider's resources.
        A provider will be notified whenever the consumer creates an access request.

        Users with the consumer/consumer delegate  role can request access for a resource/resource group
      operationId: post-auth-v1-policies-requests
      parameters:
        - name: Authorization
          in: header
          description: AAA Issued Identity token
          required: true
          schema:
            type: string
            minLength: 1
            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
      requestBody:
        description: |
          - `itemId` : The catalogue ID of the item for which the request is to be created
          - `itemType` : The type of the resource being requested for, it could be either RESOURCE or RESOURCE_GROUP
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                itemId:
                  type: string
                  format: uuid
                  pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                itemType:
                  enum:
                    - RESOURCE_GROUP
                    - RESOURCE
                  minLength: 1
                additionalInfo:
                  description: Used to define additional information to access data for educational, research or testing, non-commercial, academia purposes
                  type: object
                  minProperties: 1
                  maxProperties: 10
              required:
                - itemId
                - itemType
              x-examples:
                example-1:
                  itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                  itemType: RESOURCE
            examples:
              Create Access Request:
                value:
                  itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                  itemType: RESOURCE
              Create Access Request with additionalInfo:
                value:
                  itemId: b34eb955-c691-4fd3-b200-f18bc78810a2
                  itemType: RESOURCE
                  additionalInfo:
                    name: Miles Davis
                    email: miles@davis.org
                    phone: 987654321
                    purpose: testing
                    description: The resource would be used for testing the abcd application in which services are offered free of cost for public welfare


      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNotificationSuccessResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '400':
          description: |-
            Bad Request
            - Schema validation, missing or incorrect fields & values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generalBadRequest'
              examples:
                Example:
                  value:
                    type: urn:dx:acl:badRequest
                    title: Bad Request
                    detail: Request could not be created, as the item type is invalid
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: |-
            Unauthorized
            - `token` invalid/expired
            - A user with non-consumer role trying to create a request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: |-
            Forbidden
            - APD URL of the current APD is different that of the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNotificationForbidden'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '404':
          description: |-
            Not Found
            - Resource not found in Data Exchange Catalogue Server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNotificationResourceNotFoundResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '409':
          description: |-
            Conflict
            - The policy or request for the given resource was previously created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createNotificationConflictResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json

      security:
        - authorization: [ ]

      x-codeSamples:
        - lang: 'cURL'
          label: 'Create access request'
          source: |
            curl --location --request POST 'https://example-apd.com/dx/apd/acl/v1/policies/requests' \
            --header 'Authorization: <tokenValue>' \
            --header 'Content-Type: application/json' \
              --data-raw '<payload>'

        - lang: 'cURL'
          label: 'Create access request with additional info'
          source: |
            curl --location --request POST 'https://example-apd.com/dx/apd/acl/v1/policies/requests' \
            --header 'Authorization: <tokenValue>' \
            --header 'Content-Type: application/json' \
              --data-raw '<payload>'

    put:
      tags:
        - Access Request
      summary: Update Access Request
      description: |
        Providers or provider delegates can choose to approve or reject **pending** access requests associated with their resources.

        If the request is approved
        - The request is modified to the `approved` state
        - A policy is created corresponding to the requested resource with the applicable expiry time and constraints.

        If the request is rejected
        - The request is modified to the `rejected` state


      operationId: put-auth-v1-policies-requests
      parameters:
        - name: Authorization
          in: header
          description: AAA Issued Identity token
          required: true
          schema:
            type: string
            minLength: 1
            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
      requestBody:
        description: |-
          - `requestId` :  ID of the request. Can get this `id` by using the GET Access request API.
          - `status` : The `provider` or `provider delegate` can update the status to `granted` or `rejected`.
          - `expiryAt` : expiration time stamp of the policy that will be created (Only present for the granted requests).
          - `constraints` :  constraints for the access request if it is granted.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - title: approve access request
                  additionalProperties: false
                  type: object
                  properties:
                    requestId:
                      type: string
                      format: uuid
                      pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                    status:
                      type: string
                      enum:
                      - granted
                    expiryAt:
                      type: string
                    constraints:
                      type: object
                  required:
                    - requestId
                    - status
                    - expiryAt
                    - constraints

                - title : reject access request
                  additionalProperties: false
                  type: object
                  properties:
                    requestId:
                      type: string
                      format: uuid
                      pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
                    status:
                      type: string
                      enum:
                      - rejected
                  required:
                    - requestId
                    - status

              x-examples:
                example-1:
                  requestId: bca11712-f381-46a5-afa3-a29b00568ace
                  status: granted
                  expiryAt: '2024-03-05T20:00:19'
                  constraints:
                    access:
                      - api
                      - sub
                      - file
            examples:
              Update Approved access request:
                value:
                  requestId: bca11712-f381-46a5-afa3-a29b00568ace
                  status: granted
                  expiryAt: '2024-03-05T20:00:19'
                  constraints:
                    access:
                      - api
                      - sub
                      - file
              Update Rejected access request:
                value:
                  requestId: bca11712-f381-46a5-afa3-a29b00568ace
                  status: rejected
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAccessRequest'
              examples:
                Update:
                  value:
                    type: 'urn:dx:acl:success'
                    title: Success
                    detail: 'Request updated successfully'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '400':
          description: 'Bad Request- Schema validation, missing or incorrect fields & values'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateNotificationBadRequest'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '404':
          description: '- Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateNotificationNotFound'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '401':
          description: '- Unauthorized - `token` invalid/expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '403':
          description: |-
            Forbidden
            - User does not own the resource for which a policy is to be created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateNotificationForbiddenResponse'
          headers:
            Content-Type:
              schema:
                type: string
              description: application/json
        '409':
          description: |-
            Conflict
            - Policy for the approved request was created previously
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateNotificationConflict'
      security:
        - authorization: [ ]

      x-codeSamples:
        - lang: 'cURL'
          label: 'Reject access request'
          source: |
            curl --location --request PUT 'https://example-apd.com/dx/apd/acl/v1/policies/requests' \
            --header 'Authorization: <tokenValue>' \
            --header 'Content-Type: application/json' \
              --data-raw '<payload>'

        - lang: 'cURL'
          label: 'Approve access request'
          source: |
            curl --location --request PUT 'https://example-apd.com/dx/apd/acl/v1/policies/requests' \
            --header 'Authorization: <tokenValue>' \
            --header 'Content-Type: application/json' \
              --data-raw '<payload>'

    delete:
      tags:
        - Access Request
      summary: Withdraw Access Request
      description: |-
        A consumer/consumer may choose to withdraw access requests they have created, **as long as they are still in the pending state**. A withdrawn request  cannot be approved or rejected by the concerned provider.

        Only users with consumer/consumer delegate role can call this API.
      operationId: delete-auth-v1-policies-requests
      parameters:
        - name: Authorization
          in: header
          description: AAA Issued Identity token
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
            minLength: 1
      requestBody:
        description: |-
          - `id` : the UUID of the request that is to be deleted.

          Consumers can get the `id` of the request they want to delete using the list access request API.
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                id:
                  type: string
                  format: uuid
                  pattern: '^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$'
              required:
                - id
            examples:
              Delete Notification:
                value:
                  id: 6c61b9c7-6cfd-4d2a-bfc1-217fd56bb8e3

      responses:
        '200':
          description: Successfully deleted the access request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteNotification'
        '400':
          description: |-
            Bad Request
              - Errors or exceptions
              - The access request is no longer in the `PENDING` status or has already been withdrawn earlier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteNotificationBadRequest'
        '404':
          description: |-
            Not Found
              - The ID for which the request is being withdrawn is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteNotificationNotFound'
        '401':
          description: |-
            Unauthorized
              - Invalid token
              - User with non-consumer role trying to call the API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'

      security:
        - authorization: [ ]

      x-codeSamples:
        - lang: 'cURL'
          label: 'Withdraw access request'
          source: |
            curl --location --request DELETE 'https://example-apd.com/dx/apd/acl/v1/policies/requests' \
            --header 'Authorization: <tokenValue>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'        


components:
  securitySchemes:
    authorization:
      type: http
      scheme: bearer
  schemas:
    getNotificationNotFoundResponse:
      title: Update notification forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: 'Access request not found, for the server : dummy.server.io'
    createNotificationForbiddenResponse:
      title: Create notification forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Forbidden
        detail: 'Access Denied: You do not have ownership rights for this resource'
    updateNotificationForbiddenResponse:
      title: Update notification forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Forbidden
        detail: "Access Denied: You do not have ownership rights for this resource."


    updateNotificationNotFound:
      title: Update notification not found
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Request could not be updated, as it is not found

    updateNotificationBadRequest:
      title: Update notification bad request
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:badRequest
        title: Bad Request
        detail: Request could not be updated, as it is not in pending status

    updateNotificationConflict:
      title: Update notification conflict
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:conflict
        title: Conflict
        detail: Request could not be approved as, policy is already created

    UpdateAccessRequest:
      title: Delete notification forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:success
        title: Success
        detail: Request updated successfully
    getNotificationForbiddenResponse:
      title: get notification forbidden response
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Access Denied
        detail: 'Access Denied: You do not have ownership rights for this resource.'
    createNotificationSuccessResponse:
      title: Create notification success
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:success
        title: Success
        detail: Request inserted successfully!

    createNotificationResourceNotFoundResponse:
      title: Create notification resource not found
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Request could not be created, as resource was not found

    createNotificationForbidden:
      title: Creating notification is forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Forbidden
        detail: 'Resource is forbidden to access, as the APD URL for the resource : dmp-apd.iudx.io is different than the current APD : acl-apd.iudx.io'
    createNotificationConflictResponse:
      title: Create notification conflict response
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:conflict
        title: Conflict
        detail: Request could not be created, as policy or request for the given resource is already present


    getPolicySuccessResponseWithResourceType:
      title: get policy for resource item type.
      required:
        - type
        - title
        - results
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        results:
          type: array
          minLength: 1
          items:
            type: object
            properties:
              policyId:
                type: string
              itemId:
                type: string
              itemType:
                type: string
                default: "RESOURCE"
              resourceServerUrl:
                type: string
              consumer:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: array
                      items:
                        type: object
                        properties:
                          email:
                            type: string
                          name:
                            type: array
                            items:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                          id:
                            type: string
              provider:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: array
                      items:
                        type: object
                        properties:
                          email:
                            type: string
                          name:
                            type: array
                            items:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                          id:
                            type: string
              status:
                type: string
                enum: [ "ACTIVE","DELETED" ]
              expiryAt:
                type: string
              constraints:
                type: object
              updatedAt:
                type: string
                minLength: 1
              createdAt:
                type: string
                minLength: 1
      example: { "type": "urn:dx:acl:success",
                 "title": "Success",
                 "results": [ { "policyId": "aaaaaaaa-1234-1234-1234-1234aaaa1234",
                                "itemId": "cccccccc-4576-3455-5645-3565aaaa4255",
                                "itemType": "RESOURCE",
                                "resourceServerUrl": "dummy.resource.server.url",
                                "expiryAt": "2024-03-05T20:00:19",
                                "constraints": { access: [ sub ] },
                                "status": "ACTIVE",
                                "updatedAt": "2023-11-07T09:12:44.144204",
                                "createdAt": "2023-09-26T11:17:58.473452",
                                "consumer": { "email": "dummyConsumer@example.com",
                                              "name": { "firstName": "Some",
                                                        "lastName": "Consumer" },
                                              "id": "gklmcd4-4576-3455-5645-3565aaaa4255" },
                                "provider": { "email": "someProvider@example.com",
                                              "name": { "firstName": "Some",
                                                        "lastName": "Provider" },
                                              "id": "abcdcd4-4576-3455-5645-3565aaaa4255" } } ] }

    getPolicySuccessResponseWithResourceGroup:
      title: get policy for resource-group item type.
      required:
        - type
        - title
        - results
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        results:
          type: array
          minLength: 1
          items:
            type: object
            properties:
              policyId:
                type: string
              itemId:
                type: string
              itemType:
                type: string
                default: "RESOURCE_GROUP"
              resourceServerUrl:
                type: string
              consumer:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: array
                      items:
                        type: object
                        properties:
                          email:
                            type: string
                          name:
                            type: array
                            items:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                          id:
                            type: string
              provider:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: array
                      items:
                        type: object
                        properties:
                          email:
                            type: string
                          name:
                            type: array
                            items:
                              type: object
                              properties:
                                firstName:
                                  type: string
                                lastName:
                                  type: string
                          id:
                            type: string
              status:
                type: string
                enum: [ "ACTIVE","DELETED" ]
              expiryAt:
                type: string
              constraints:
                type: object
              updatedAt:
                type: string
                minLength: 1
              createdAt:
                type: string
                minLength: 1
      example: { "type": "urn:dx:acl:success",
                 "title": "Success",
                 "results": [ { "policyId": "aaaaaaaa-6473-3546-5436-8758aaaa5897",
                                "itemId": "cccccccc-6754-8958-2456-3452aaaa5436",
                                "itemType": "RESOURCE_GROUP",
                                "resourceServerUrl": "rs.iudx.io",
                                "expiryAt": "2024-09-05T20:00:19",
                                "constraints": { access: [ sub ] },
                                "status": "ACTIVE",
                                "updatedAt": "2024-02-14T04:54:16.592540",
                                "createdAt": "2023-10-26T11:17:58.473452",
                                "consumer": { "email": "dummyConsumerAbcd@example.com",
                                              "name": { "firstName": "Dummy",
                                                        "lastName": "Consumer" },
                                              "id": "gklmcd4-4576-3455-5645-3565aaaa4255" },
                                "provider": { "email": "dummyProvider@example.com",
                                              "name": { "firstName": "Dummy",
                                                        "lastName": "Provider" },
                                              "id": "bbbbbbbb-8958-2445-2354-7587aaaa6776" } },
                   { "policyId": "aaaaaaaa-9870-7676-7456-2454aaaa1111",
                     "itemId": "cccccccc-2452-2455-5656-1111aaaa7878",
                     "itemType": "RESOURCE_GROUP",
                     "expiryAt": "2024-08-05T20:00:29",
                     "constraints": { access: [ sub ] },
                     "status": "ACTIVE",
                     "updatedAt": "2023-11-07T09:12:44.144204",
                     "createdAt": "2023-09-26T11:17:58.473452",
                     "consumer": { "email": "dummyConsumer@example.com",
                                   "name": { "firstName": "Dummy",
                                             "lastName": "Consumer" },
                                   "id": "gklmcd4-4576-3455-5645-3565aaaa4255" },
                     "provider": { "email": "dummyProviderTwo@example.com",
                                   "name": { "firstName": "Some",
                                             "lastName": "ProviderTwo" },
                                   "id": "bbbbbbbb-2652-1167-1766-4587aaaa2454" } } ] }

    deleteNotificationForbiddenResponse:
      title: Delete notification forbidden
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Forbidden
        detail: 'Access Denied: You do not have ownership rights for this resource.'

    deleteNotificationNotFound:
      title: Delete notification not found
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Request could not be withdrawn, as it is not found

    deleteNotificationBadRequest:
      title: Delete notification bad request
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:badRequest
        title: Bad Request
        detail: Request could not be withdrawn, as it is not in pending status
    deleteNotification:
      title: Delete Notification
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:success
        title: Success
        detail: Request deleted successfully

    deletePolicy:
      title: deletePolicy
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:success
        title: Success
        detail: Policy deleted successfully
    deletePolicyInvalidUserResponse:
      title: deletePolicyInvalidUserResponse
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Forbidden
        detail: 'Access Denied: You do not have ownership rights for this policy.'
    getPolicyInvalidUserResponse:
      title: getPolicyInvalidUserResponse
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Access Denied
        detail: Policy could not be fetched, user doesn't own the policy

    updateNotificationInvalidUserResponse:
      title: updateNotificationInvalidUserResponse
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Access Denied
        detail: Notification could not be updated, notification doesn't belong to the user
    policyNotFound:
      title: policyNotFound
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Policy Not Found
    deletePolicyErrorResponse:
      title: deletePolicyErrorResponse
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:badRequest
        title: Bad Request
        detail: Policy could not be deleted, as policy is not ACTIVE
    deletePolicyNotFoundErrorResponse:
      title: deletePolicyNotFoundErrorResponse
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:resourceNotFound
        title: Not Found
        detail: Policy could not be deleted, as it doesn't exist
    Unauthorized:
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:invalidAuthorizationToken
        title: Not Authorized
        detail: Not Authorized
    createPolicyBadRequest:
      title: Create policy bad request
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:badRequest
        title: Bad Request
        detail: Item id given is not present
    createPolicyForbidden:
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: urn:dx:acl:forbidden
        title: Forbidden
        detail: 'Access Denied: You do not have ownership rights for this resource.'
    createPolicySuccessResponse:
      title: complete
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      required:
        - type
        - title
        - detail
      example:
        type: 'urn:dx:acl:success'
        title: Success
        detail: Policy created successfully

    conflictResponse:
      title: standardPolicyAlreadyExistErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      required:
        - type
        - title
        - detail
      example:
        type: 'urn:dx:acl:conflict'
        title: Conflict
        detail: >-
          Policy already exist for the request object
          [bf9d8f85-b7b0-40bb-8197-0046725f1ca8]

    generalBadRequest:
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        detail:
          type: string
          minLength: 1
      required:
        - type
        - title
        - detail
      example:
        type: 'urn:dx:acl:badRequest'
        title: Bad Request
        detail: Bad Request
    AccessRequest:
      type: object
      properties:
        type:
          type: string
          minLength: 1
        title:
          type: string
          minLength: 1
        results:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            type: object
            properties:
              requestId:
                type: string
                format: uuid
                minLength: 1
              itemId:
                type: string
                minLength: 1
              itemType:
                type: string
                minLength: 1
              resourceServerUrl:
                type: string
                minLength: 1
              status:
                type: string
                minLength: 1
              expiryAt:
                type: string
                minLength: 1
              constraints:
                type: object
              additionalInfo:
                type: object
              updatedAt:
                type: string
                minLength: 1
              createdAt:
                type: string
                minLength: 1
              consumer:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                  email:
                    type: string
                    minLength: 1
                  name:
                    type: object
                    properties:
                      firstName:
                        type: string
                        minLength: 1
                      lastName:
                        type: string
                        minLength: 1
                    required:
                      - firstName
                      - lastName
                required:
                  - id
                  - email
                  - name
              provider:
                type: object
                properties:
                  id:
                    type: string
                    minLength: 1
                  email:
                    type: string
                    minLength: 1
                  name:
                    type: object
                    properties:
                      firstName:
                        type: string
                        minLength: 1
                      lastName:
                        type: string
                        minLength: 1
                    required:
                      - firstName
                      - lastName
                required:
                  - id
                  - email
                  - name
            required:
              - requestId
              - itemId
              - itemType
              - status
              - expiryAt
              - resourceServerUrl
              - constraints
              - consumer
              - provider
      required:
        - type
        - title
        - results
      x-examples:
        Example:
          type: 'urn:dx:acl:success'
          title: User permission requests
          results:
            - requestId: e4619679-f5d9-4eff-9f79-bbded6130bb1
              itemId: string
              itemType: RESOURCE_GROUP
              status: pending
              expiryDuration: string
              constraints:
                access:
                  - api
                  - sub
                  - file
              user:
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                email: user@example.com
                name:
                  firstName: string
                  lastName: string
              owner:
                id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                email: user@example.com
                name:
                  firstName: string
                  lastName: string

    name:
      title: schemaName
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string


    user:
      title: schemaUser
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
          minLength: 1
          maxLength: 512
        name:
          $ref: '#/components/schemas/name'
        email:
          pattern: >-
            ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
          minLength: 1
      required:
        - id
        - name
        - email

    owner:
      title: schemaOwner
      type: object
      properties:
        id:
          pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
          minLength: 1
          maxLength: 512
        name:
          $ref: '#/components/schemas/name'
        email:
          pattern: >-
            ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
          minLength: 1
      required:
        - id
        - name
        - email

    item:
      type: object
      properties:
        itemId:
          pattern: '^[a-zA-Z0-9_*\-*\.\/]+$'
          minLength: 1
          maxLength: 512
        itemType:
          enum:
            - resource
            - resource_group
          minLength: 1
      required:
        - itemId
        - itemType

    requestBodyForVerify:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/user'
        owner:
          $ref: '#/components/schemas/owner'
        item:
          $ref: '#/components/schemas/item'
